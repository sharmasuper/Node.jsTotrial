core module lecture -6
use - database connect kai liy code processing api call file system kai it call core module
           yai hamari file mai pahlai sai hi banai hotai h'
       ex - console.log()  //its core module
      ex - fs,Buffer,HTTP      
     difference bttween global and non - global
    global vo hota jinko import karnai ki jarurath nahi hoti
    ex- console.log 


 lecture - 7
 create serve
 use http server
 handle request and response on server   

lecture - 8
package.json
//install command 
//frist - npm init

lecture 9 - make .gitignore file

lecture 10 - install nodemon command => npm i nodemon
             run command - nodemon .\index.js
             
 lecture -11 make simple api 
   create server bananai kai badh response ka type difine kaigai 
   resp.writeHead(200,{'Content-Type':'application\json'})           
    
   fir data.js sai datako import karigai 
   const data = require('./data')

   or use response ko likaigai json data object ko string mai convert karigai
   resp.write(JSON.stringify(data))

localHost per print kargai - .listen(4500) 


lecture - 12  heading - Getting input from comman line

step - 1 understanding process command and process.argv command
 //console.log(process)
//process ek object hota h jskai ander node js ka almost sab hota
//property ko access karo
console.log(process.argv)
 //argv means = argunment vector
//he give two response frist
//frist jaha hamari file save /install h vo
//second jaha sai hum isko run kar rahai vo ya file run kar rahai h
//iskai badh jo bhi hum input likhtai vo hami mil jata h
//ex - node .\index.js hello
//result frist - install, second - file run path thrid- argunment ----

//target - 
console.log(process.argv[2])
//command run - node .\index.js hello mohit
//result - hello

lecture - 13
 display file list from folder
 make file folder build fiels require('fs') file server by loop
 get all file ussing file foreach method

lecture - 14 crud with file system oparation in asynchronous Programming Language

what is buffer - jab bhi hum node js per file create kartai h to node js ko todi si memory chahiyai hoti
              taki vo apnai perform achhai sai kar skkai or usai hum buffer boltai 
-----------------lecture14 crud file system--------------------------------------------


const fs = require('fs')
const path = require('path')
const dirpath = path.join(__dirname,"crud")
//fs.writeFileSync('apple.txt',"this file text")  //yai file merai root folder mai banaigi
//isliy mai issai crud folder mai file banauga
//create method
const filepath =  `${dirpath}/apple.txt`
// fs.writeFileSync(filepath,"this is simple text file")
//read method
// fs.readFile(filepath,'utf8',(error,item)=>{
//   console.log(item)
// })
//update method
// fs.appendFile(filepath," and file name is apple.txt",(err)=>{
//     if(!err){
//         console.log("file is updated")
//     }
// })

//rename
// fs.rename(filepath,`${dirpath}/fruit.txt`,(err)=>{
//     if(!err) {console.log("file name isUpdate")}
// })

//Delete

fs.unlinkSync(`${dirpath}/fruit.txt`)
-----------------------------------close lecture14 file code ------------------------------------------------------






lecture - 15 - Asncronous programming Language
 lecture - 16 Handle Asynchronous Data

lecture - 17 how nodejs work
 //code =>calll Stack => NodeAPI =>event Loop\

 lecture - 18 express js introduction

 simple respone 
 /////////////////////////////////////////
 const express = require('express')
const app = express()

app.get('/',(req,res)=>{
  res.send("hello , this is home page")

})
app.get('/about',(req,res)=>{
    res.send("hello , this is about page")
    
  })


  app.get('/help',(req,res)=>{
    res.send("hello , this is help page")
    
  }) 

app.listen(5000)  //server per run karatai h 

//////////////////////////////////end////////////////////////


lecture - 19 simple unserstanding between Request & Response Params




lecture - 20 
 resp.send() ismai html add kiya

lecture -21 -  Make Html page
const publicpath = path.join(__dirname,'public')
app.use(express.static(publicpath)); ka use karkai public folder kai pages ko access ki api sai 
style or image issai add nahi kar sktai 




lecture - 22 Make 404page extenstion remove

app.get('*',(req,resp)=>{
  resp.sendFile(`${publicpath}/PagenotFound.html`)   //koi bhi match nahi hoga to yai about.html page per redirect kar dega
})

app.get('/about',(req,resp)=>{      esai hum extenstion remove ka sktai or .html page likhnia ki need bhi nahi padhti
  resp.sendFile(`${publicpath}/about.html`)
})


lecture - 23 template page
 template  template page vah hotai h jinmai hum database sai data nahi latai h simple object banakai data letai 
           step1= npm i ejs
           step2 = app.set('view engine','ejs'); in index.js

           step -3  
                   app.get('/profile',(req,resp)=>{
                    const user = {
                    name : "anil sidu",
                    email : "anil@gmail.com",
                     city : "tonk"
                     }

                    resp.render('profile',{user})
                     })

code seen-             
///////////////////////////////////////////////////////////////////////////////////
const express = require('express')
const path = require('path');
const app = express()



const publicpath = path.join(__dirname,'public')  


app.set('view engine','ejs');
//jab bhi hum template engine use karai hmai views folder hi banana chihiyai ya by default hota h


app.get('',(req,resp)=>{

  resp.sendFile(`${publicpath}/index.html`)
})



app.get('/profile',(req,resp)=>{
  const user = {
    name : "anil sidu",
    email : "anil@gmail.com",
    city : "tonk"
   }

 resp.render('profile',{user})
})


app.get('/home',(req,resp)=>{
  resp.sendFile(`${publicpath}/Home.html`)
})
app.get('/about',(req,resp)=>{
  resp.sendFile(`${publicpath}/about.html`)
})



app.get('*',(req,resp)=>{
   
  resp.sendFile(`${publicpath}/PagenotFound.html`)   
})
 
app.listen(5000,()=>{ 
  console.log("api hit")
})

--------------------------------------------------------------------------------------------------
profile.ejs

code -------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile Page</title>
</head>
<body>
    <h1>profile page</h1>
    <h2><%= user.name %></h2> 
    <h2><%- user.city %></h2>
    <h2> <%- user.email %></h2>
</body>
</html>

///////////////////////////////////////////////////////////////////////////////////////////////////


lecrure - 24 dynmic page with ejs

ismai hmnai common header banaya 
jismai hum kuch bhi commanly use kar sktai
bus simply yai command use karni h -    <%- include('common/header'); %>


lecture - 25 Middleware
why we use middleware in routes 
because we use mddleware only routes so we use middleware on routes
it help we handle or access request or response and modified request or response

why we do modified request or respone 
because many time we need check use athentication yes or no
so we need to modify it 

ya hami age karni hoti h ya specific country kai ander side block karni hoti h jab hum iska use kartai h

middleware Type - 
 1 application-level middleware 
 2 Route-level middleware
 3 Error-handling middleware
 4 Built - in middleware
 5 third party middleware

abhi hamnai is lecture mai application -level middleware dekai h


lecture - 26 Route Level middleware
             lst lecture i learn application level middleware it apply all middleware Route
             but hami kisi ek kai uper middleware apply karna h to hum kaisai karai uskai liy hum Route level middleware ka sue karigai
             Route middleware ek route kai uper group of route kai upre ya sarai route kai uper bhi lag skta h

note - hamaisa middleware seprate file mai banana chahiya agar hmai ek sath 15 -20 middleware bananai ho fir 
  isliy hum hamiasha middleware seprate file mai banatai h yai good practice hoti h


//////////////////////////////////////////////////codestart ///////////////////////
const express = require('express')
const app = express()
const Filter = require('./Middleware/Middleware')
const Filter1 = Filter.reqFilter

// const reqFilter = (req,resp,next) =>{
//   // console.log('reqFilter') ;   //ab is step mai server gumptha hi jayga jab tak hum next() method ka use nahi karaigai
//   // next()   //ab issai yai home route or user route per perfectly chlaiga
// //iska use case

// if(!req.query.age){
//   resp.send('please provide age')
// }
// else if(req.query.age<18){
//   resp.send("You can not access the page")
// }
// else
// {
//   next()
// }

// }   

//app.use(reqFilter)     

app.get('/',(req,resp)=>{
  resp.send("<h1>hello home page</h1>")
})

app.get('/user',Filter1,(req,resp)=>{   //yai sirf ab user page per hi kam karaiga other page per kam nahi karaiga
                                            //other page per kam nahi karaiga
  resp.send("<h1>hello users page</h1>")
})                                                   
app.get('/about',Filter1,(req,resp)=>{    //ab yai sirf about or user per hi route kam karaiga
                                               //agar hum reqFilter ji route per likaigai yai uski route per middleware lagaiga
  resp.send("<h1>hello about page</h1>")
})
 //leki jab hamrai pass 20-25 route h tab easai ek ek kai uper dalaigai to yai acchi practice nahi h 
 isliy hum route import kargai

app.listen(5000,()=>{console.log("sharma")})


//////////////////////////////code end//////////////////////////////////////////////////////
//group level middleware =>

const express = require('express')
const app = express()
const Filter = require('./Middleware/Middleware')
const Filter1 = Filter.reqFilter
const route = express.Router()       //isai hum group level middleware kahta h 
  route.use(Filter1)  


app.get('/',(req,resp)=>{
  resp.send("<h1>Hello home page</h1>")
})


route.get('/about',(req,resp)=>{
  resp.send("<h1>Hello about page</h1>")
})


app.get('/user',(req,resp)=>{
  resp.send("<h1>Hello User page</h1>")
})

route.get('/contact',(req,resp)=>{
  resp.send("<h1>Hello contact page</h1>")
})

//ab mujai route contact or about page per lagu karnai h to hum app.get ki jagah route.get kar degai

app.use('/',route)  //or yai line lkhni h last mai 





lecture -27 Install mongoDB
step1 - serach download mongoDB and 
step2 - click Mongodb Community download
step3 - download Mongodb Community server in msi
step4 - download mongoDB shell for server
step5 - open cmd and run command mongod if it direct to path and show error 
step6- create data folder in c directory this data folder create db folder 
step7 - run command mongod if not direct to starting path server is run 
step8 - run mongosh (powershell command)

leccture - 30 
   connect Mongodb with node js

step1 = serach mongodb npm  - and then you will write npm i mongodb

step2 = go there documentation and read it that how it connect


lecture31 - Read data from Mongodb
            hum db collection ki alag sai file banaigai 
            because last lecture we had connect databse 
            suppose we want to create many functions for many difference database
            again and again we will not create database  because it take time cunsuming process but does not take enough time only 
            take 3 to 5 microsec 
            but compare to other code ,he take time so we keep only one collection

         i have one query in my mind,how i will create db.collection  file
         answer its simple  - 
         step1 - create file mongodb.js
         step2  - break index.js code in functions so that you don't confuze




lecture 32 - in this lecture we have create insert file for insert data nodejs to mongoDB
 lecture 33 - in this lecture data have updated using node js to mongoDB
 lecture -34 - this lecture , we have created delete.js file and data has deleted by using deleted method deletedMany

lecture35 - Basic api with mongodb
    haum kabhi bhi api sai body pass nahi kar sktai h

lecture36 - Post api with Mongodb
step1 - now, we we are wrting data in postman and send to nodejs
        but i have one question how to send daya and  how i will find data in node js recive or not
        whenever i get data to postman, we use middleware 
        app.use() method
        app.use(express.json()) because over data will be enable



lecture37 - Update data in Mongodb
   route mai "/:name" pass kiya to hum isssai req.params.name sai hi access kar sktai h

lecture -38 delete api using Mongodb
 const mongodb = require('mongodb')
 object_id = new mongodb.ObjectId(req.params.id)   
 id ko object id banaya


--------------------------------------------------------------------------------------
lecture-39 
Mongoose with node
mongoose have two part 1st schema and other is Modal

what is schema? - 
it Basically validates database validation

In this schema we defined ,which field you have keeped in database like as name ,id ,address,brand,price,

if we  does not defines field in schema such as number . in this case,mongoose will denine to add undefined field

in schema we use type validation


What is Modal? -
Modal Basically connect Mongodb to nodejs

What is different between Modal and Schema ?
all field in database such as - name,class,number 
we have defined it Schema so that validation will be apply

but Modal Basically have used to schema and connect Mongodb to nodejs


lecture-40 CRUD with mongoose
  
lecture -41 Post APi With Mongoose 
      and then test api in Postman and thunder Client
  ///body kai threw data send kiya
{
  "name":"Mohit Sharma",
  "price":400,
  "brand":"Samsung",
  "category":"Mobbiles"
}


lecture 42 - GET,DELETE,and PUT method in mongoose
       
lecture - 43 - search api in node js with mongodb

lector - anson the developer 
in this video we have learn about get and post request how it work how to use middleware
anson the develop it is lect-1 or 2 videos 

when we use body in postman  - x-www-from-urllecoded 
this time we use middleeare app.use(express.urlencoded({extended:false}))
when we write it we can use x-www-from-urllecoded data

and we write middleeare app.use(express.json)
this time we use json row data 


lecture -4 Middleware
An express middleware is nothing more or less than just any ordinary function that has three parameters:Request & Response object,
and a function to invoke the next middleeare function

middleeare allow you to seprate your logic multiple difference functions,invoking each in sequential order

ex = We used the express.json() middleeare to handle request to detect body request with json, and the function the 
request object and attaches the proper payload to req.body

we were set key in postman header
aurtorization = '123'
then use condition 

lecture - 5 cookie
http cookie are a small piece of data that is send  back from a server to web browser 
we server store these cookies which allow subseqent requests made to the server to exchange the cookie for piece of information.

Cookie can have an expiration date . Once expired , the cookie will no longer be sent to the server whenever a request is made

we are set cookie using command -  resp.cookie('session_id','123456') 
we are get cookie using command - req.cookies


lecture - 6 session
session is very important because it allow to maintain http request.
the major difference between session and cookie is that session live on server and cookie live on the client side
now  reason is why you  need session ,many reason but major reason is you don't want to save anyviewer data as a cookie like anything
that's sensitive so for example a username a password you

you don't want to save that as a cookie on the client you want to save that on the database so that what the session know which
user is making that request so essentially session are more secure because they store on the server rather than having everything
stored in client so I think honestly the best way to show you guys how it works is by providing example in express so 

1st step = npm i express-session









