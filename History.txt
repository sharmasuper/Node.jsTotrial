core module lecture -6
use - database connect kai liy code processing api call file system kai it call core module
           yai hamari file mai pahlai sai hi banai hotai h'
       ex - console.log()  //its core module
      ex - fs,Buffer,HTTP      
     difference bttween global and non - global
    global vo hota jinko import karnai ki jarurath nahi hoti
    ex- console.log 


 lecture - 7
 create serve
 use http server
 handle request and response on server   

lecture - 8
package.json
//install command 
//frist - npm init

lecture 9 - make .gitignore file

lecture 10 - install nodemon command => npm i nodemon
             run command - nodemon .\index.js
             
 lecture -11 make simple api 
   create server bananai kai badh response ka type difine kaigai 
   resp.writeHead(200,{'Content-Type':'application\json'})           
    
   fir data.js sai datako import karigai 
   const data = require('./data')

   or use response ko likaigai json data object ko string mai convert karigai
   resp.write(JSON.stringify(data))

localHost per print kargai - .listen(4500) 


lecture - 12  heading - Getting input from comman line

step - 1 understanding process command and process.argv command
 //console.log(process)
//process ek object hota h jskai ander node js ka almost sab hota
//property ko access karo
console.log(process.argv)
 //argv means = argunment vector
//he give two response frist
//frist jaha hamari file save /install h vo
//second jaha sai hum isko run kar rahai vo ya file run kar rahai h
//iskai badh jo bhi hum input likhtai vo hami mil jata h
//ex - node .\index.js hello
//result frist - install, second - file run path thrid- argunment ----

//target - 
console.log(process.argv[2])
//command run - node .\index.js hello mohit
//result - hello

lecture - 13
 display file list from folder
 make file folder build fiels require('fs') file server by loop
 get all file ussing file foreach method

lecture - 14 crud with file system oparation in asynchronous Programming Language

what is buffer - jab bhi hum node js per file create kartai h to node js ko todi si memory chahiyai hoti
              taki vo apnai perform achhai sai kar skkai or usai hum buffer boltai 
-----------------lecture14 crud file system--------------------------------------------


const fs = require('fs')
const path = require('path')
const dirpath = path.join(__dirname,"crud")
//fs.writeFileSync('apple.txt',"this file text")  //yai file merai root folder mai banaigi
//isliy mai issai crud folder mai file banauga
//create method
const filepath =  `${dirpath}/apple.txt`
// fs.writeFileSync(filepath,"this is simple text file")
//read method
// fs.readFile(filepath,'utf8',(error,item)=>{
//   console.log(item)
// })
//update method
// fs.appendFile(filepath," and file name is apple.txt",(err)=>{
//     if(!err){
//         console.log("file is updated")
//     }
// })

//rename
// fs.rename(filepath,`${dirpath}/fruit.txt`,(err)=>{
//     if(!err) {console.log("file name isUpdate")}
// })

//Delete

fs.unlinkSync(`${dirpath}/fruit.txt`)
-----------------------------------close lecture14 file code ------------------------------------------------------






lecture - 15 - Asncronous programming Language
 lecture - 16 Handle Asynchronous Data

lecture - 17 how nodejs work
 //code =>calll Stack => NodeAPI =>event Loop\

 lecture - 18 express js introduction

 simple respone 
 /////////////////////////////////////////
 const express = require('express')
const app = express()

app.get('/',(req,res)=>{
  res.send("hello , this is home page")

})
app.get('/about',(req,res)=>{
    res.send("hello , this is about page")
    
  })


  app.get('/help',(req,res)=>{
    res.send("hello , this is help page")
    
  }) 

app.listen(5000)  //server per run karatai h 

//////////////////////////////////end////////////////////////


lecture - 19 simple unserstanding between Request & Response Params

















